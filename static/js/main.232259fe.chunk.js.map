{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","images","setImages","_useState3","_useState4","perPage","setPerPage","_useState5","_useState6","query","setQuery","useEffect","fetch","url","concat","then","response","json","res","hits","react_default","a","createElement","className","lib","time","handler","style","padding","placeholder","onChange","e","target","value","react_masonry_component_lib_default","elementType","undefined","map","image","idx","react_intersection_observer_esm","threshold","key","triggerOnce","as","inView","listStyle","width","alt","tags","src","largeImageURL","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+LA6DeA,EAhDH,WAAM,IAAAC,EAEYC,mBAAS,IAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEXK,EAFWH,EAAA,GAEFI,EAFEJ,EAAA,GAAAK,EAGaN,mBAAS,IAHtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGXE,EAHWD,EAAA,GAGDE,EAHCF,EAAA,GAAAG,EAIWV,mBAAS,IAJpBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIVE,EAJUD,EAAA,GAIFE,EAJEF,EAAA,GAOlBG,oBAAU,WACVC,MAAMC,kEAAA,MAAAC,OAAkBL,EAAlB,cAAAK,OAAoCT,IACtCU,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAG,OAAIhB,EAAUgB,MACxB,CAACb,EAAUI,IAGb,IAQQU,EAASlB,EAATkB,KAEN,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,KAAK,MAAMC,QAAQ,YACzBN,EAAAC,EAAAC,cAAA,SAAOK,MAAO,CAAEC,QAAQ,aAAeC,YAAY,eAAeC,SAZnD,SAAAC,GACrBrB,EAASqB,EAAEC,OAAOC,OAClB3B,EAAW,QAYAc,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACGE,UAAW,QACXY,YAAa,WAELC,IAATjB,GAAsBlB,EAAOkB,KAAKkB,IAAI,SAACC,EAAMC,GAAP,OACtCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,UAAW,EAAIC,IAAOH,EAAKI,aAAa,EAAOC,GAAG,MAAMd,SAAU,SAAAe,GAAM,SAAIA,GAAUN,IAAQlC,EAAU,SArB7HC,EAAWD,EAAU,KAsBLe,EAAAC,EAAAC,cAAA,MAAIK,MAAO,CAACmB,UAAU,SACnB1B,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEoB,MAAM,IAAInB,QAAQ,GAAKoB,IAAMV,EAAMW,KAAK,GAAKC,IAAMZ,EAAMa,0BAK5Ef,IAATjB,IAAuBA,EAAKiC,QAAUhC,EAAAC,EAAAC,cAAA,iCC5CzB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.232259fe.chunk.js","sourcesContent":["import React, { useEffect , useState } from 'react';\nimport './App.css';\nimport { InView } from 'react-intersection-observer'\nimport { Debounce } from 'react-throttle';\nimport Masonry from 'react-masonry-component';\n\nconst url = \"https://pixabay.com/api/\";\nconst key = \"?key=13085519-d16216777a86c832ae99bc2be\";\n\n\n\n\n\nconst App = () => {\n\nconst [images , setImages ] = useState([])\nconst [perPage , setPerPage] = useState(10)\nconst [ query , setQuery ] = useState(\"\")\n\n\nuseEffect(() => {\nfetch(url + key + `&q=${query}&per_page=${perPage}`)\n   .then(response => response.json())\n   .then(res => setImages(res))\n},[perPage , query])\n\n\nconst addImages = () => {\n  setPerPage(perPage + 5)\n}\nconst setQuerySearch = e => {\n  setQuery(e.target.value)\n  setPerPage(30)\n}\n\nconst { hits } = images;\n\n  return (\n\n  <div className=\"App\">\n    <h1>Search for images</h1>\n    <Debounce time=\"400\" handler=\"onChange\">\n        <input style={{ padding:\"10px 30px\" }} placeholder=\"search query\" onChange={setQuerySearch} />\n    </Debounce>\n             <Masonry\n                className={\"mason\"}\n                elementType={'ul'}\n            >\n              {hits !== undefined && images.hits.map((image,idx) => \n               <InView threshold={0}  key = {idx} triggerOnce={true}  as=\"div\" onChange={inView => inView && idx === perPage - 1?addImages():false}>\n                  <li style={{listStyle:\"none\"}} >\n                     <img style={{ width:300,padding:3 }} alt={ image.tags[0] } src={ image.largeImageURL } />\n                  </li>\n               </InView>\n            )}\n          </Masonry>\n      {hits !== undefined && !hits.length && <h3>nothing was found</h3>}\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}