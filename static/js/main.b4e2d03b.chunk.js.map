{"version":3,"sources":["showModal.js","App.js","serviceWorker.js","index.js"],"names":["ShowModal","_ref","src","react_default","a","createElement","onClick","e","target","nodeName","$","hide","closeModal","className","alt","document","scroll","is","console","log","App","_useState","useState","_useState2","Object","slicedToArray","images","setImages","_useState3","_useState4","page","setPage","_useState5","_useState6","query","setQuery","_useState7","_useState8","setSrc","useEffect","fetch","url","concat","then","response","json","res","toConsumableArray","hits","showModal","show","css","display","react","src_showModal","lib","time","handler","style","padding","placeholder","onChange","value","react_masonry_component_lib_default","elementType","undefined","map","image","idx","react_intersection_observer_esm","threshold","key","as","inView","length","listStyle","largeImageURL","tags","likes","views","downloads","comments","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4e2d03b.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from \"jquery\";\r\n\r\nconst ShowModal = ({src}) => {\r\n\r\n\r\n    const closeModal = (e) => {\r\n       if(e.target.nodeName !== \"IMG\"){\r\n        $(\".modal_wrapper\").hide()\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div onClick = {(e) => closeModal(e)} className=\"modal_wrapper\">\r\n            <div className=\"relative\">\r\n            <i className=\"fa fa-times cross\"></i>\r\n            <img className=\"image_modal\" alt = \"imagfawfe\" src ={src} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowModal;","import React, { Fragment, useEffect , useState } from 'react';\nimport './App.css';\nimport { InView } from 'react-intersection-observer'\nimport { Debounce } from 'react-throttle';\nimport Masonry from 'react-masonry-component';\nimport $ from \"jquery\";\nimport ShowModal from './showModal';\n\n\nconst url = \"https://pixabay.com/api/\";\nconst key = \"?key=13085519-d16216777a86c832ae99bc2be\";\n\n$(document).scroll(function(){\n  if($(\".modal_wrapper\").is(\":visible\")){\n    console.log(\"ok i did hide modal\")\n    $(\".modal_wrapper\").hide()\n  }\n \n})\n\nconst App = () => {\nconst [images , setImages ] = useState([])\nconst [ page , setPage ] = useState(1)\nconst [ query , setQuery ] = useState(\"\")\nconst [ src , setSrc ] = useState(\"\")\n\n\nuseEffect(() => {\nfetch(url + key + `&q=${query}&per_page=4&page=${page}`)\n   .then(response => response.json())\n   .then(res => {\n     setImages([...images ,...res.hits])\n   })\n},[query , page])\n\n\nconst addImages = () => {\n  setPage( page + 1)\n}\n\nconst showModal = (src) => {\n  setSrc(src)\n  $(\".modal_wrapper\").show().css({display:\"flex\"})\n}\n\nconst setQuerySearch = e => {\n  if(e.target.value === \"\" || e.target.value === null){\n    return false\n  }\n  setImages([])\n  setQuery(e.target.value)\n  setPage(1)\n}\n\n  return (\n<Fragment>\n    <ShowModal src={src} />\n  <div className=\"App\">\n    <h1>Images Search</h1>\n  \n    <Debounce time=\"1000\" handler=\"onChange\">\n        <input style={{ padding:\"10px 30px\" }} placeholder=\"search query\" onChange={setQuerySearch} />\n    </Debounce>\n    <div className=\"center\">\n             <Masonry\n                className={\"mason\"}\n                elementType={'ul'}\n            >\n              {images !== undefined && images.map((image,idx) => \n               <InView className=\"inViewStyle\" threshold={0}  key = {idx}   as=\"div\" onChange={inView => inView && idx === images.length - 1 ?addImages():false}>\n                  <li  className=\"li\"  style={{listStyle:\"none\"}} >\n                    <div className=\"image_wrapper\">\n                    <i onClick={() => showModal(image.largeImageURL)} className=\"fa fa-arrows arrows\"></i>\n                    <img onClick={() => showModal(image.largeImageURL)} className=\"imageStyle\"  alt={ image.tags[0] } src={ image.largeImageURL } />\n                    </div>\n                     <div className=\"image_bottom\">\n                       <div className=\"info\">\n                       <i className=\"fa fa-thumbs-up\"></i>\n                       <span><small>{image.likes}</small></span>\n                       </div>\n                       <div className=\"info\">\n                       <i className=\"fa fa-eye\"></i>\n                       <span><small>{image.views}</small></span>\n                       </div>\n                       <div className=\"info\">\n                       <i className=\"fa fa-cloud-download\"></i>\n                       <span><small>{image.downloads}</small> </span>\n                       </div>\n                       <div className=\"info\">\n                       <i className=\"fa fa-comment\"></i>\n                       <span><small>{image.comments}</small></span>\n                       </div>\n\n                     </div>\n                  </li>\n               </InView>\n            )}\n          </Masonry>\n          </div>\n \n  </div>\n  </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}